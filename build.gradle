group 'com.thoughtworks'

buildscript {

    repositories {
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
    }
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
sourceCompatibility = 1.8

jar {
    baseName = 'apidoc-ref-impl'
    version = '1.0.0'
}

repositories {
    mavenCentral()
}

test {
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}

task wrapper(type: Wrapper) {
   gradleVersion = '3.1'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1")
    compile("org.mybatis:mybatis-typehandlers-jsr310:1.0.1")
    compile("com.h2database:h2")

    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.1") //java.time support

    compile("net.logstash.logback:logstash-logback-encoder:4.8") //make logback output JSON




    testCompile("junit:junit")
    testCompile("io.rest-assured:rest-assured:3.0.1")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    //Spec testing dependencies
    testCompile("io.springfox:springfox-swagger2:2.6.1")
    testCompile("io.springfox:springfox-swagger-ui:2.6.1")
    testCompile("io.swagger:swagger-parser:1.0.23")
    testCompile files("libs/assertj-swagger-0.8.0-all.jar")
//    testCompile("io.github.robwin:assertj-swagger:0.4.0")
}


//ALL THE VARIOUS THINGS TO MAKE A SEPARATE TEST ROOT WORK. THANKS GRADLE
idea {
    module {
        testSourceDirs += file("src/integration/java")
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration/java')
        }
        resources.srcDir file('src/integration/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
